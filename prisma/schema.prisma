generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String            @unique
  username               String            @unique
  displayName            String?
  password               String
  emailVerified          DateTime?
  emailVerificationToken String?           @unique
  passwordResetToken     String?           @unique
  passwordResetExpiry    DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  lastSyncAt             DateTime?
  isPublic               Boolean           @default(true)
  age                    Int?
  avatarType             String            @default("default")
  avatarUrl              String?
  bio                    String?
  country                String?
  diabloExperience       String?
  gender                 String?
  hobbies                String?
  state                  String?
  apiKeys                ApiKey[]
  grailProgress          GrailProgress?
  achievements           UserAchievement[]
  statistics             UserStatistics?

  @@map("users")
}

model ApiKey {
  id         String    @id @default(cuid())
  userId     String
  key        String    @unique
  name       String
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model GrailProgress {
  id                 String   @id @default(cuid())
  userId             String   @unique
  gameMode           String   @default("Softcore")
  grailType          String   @default("Normal")
  includeRunes       Boolean  @default(true)
  includeRunewords   Boolean  @default(true)
  items              Json     @default("{}")
  ethItems           Json     @default("{}")
  runes              Json     @default("{}")
  runewords          Json     @default("{}")
  totalItems         Int      @default(0)
  totalEthItems      Int      @default(0)
  totalRunes         Int      @default(0)
  totalRunewords     Int      @default(0)
  normalCompletion   Float    @default(0)
  etherealCompletion Float    @default(0)
  runeCompletion     Float    @default(0)
  runewordCompletion Float    @default(0)
  overallCompletion  Float    @default(0)
  updatedAt          DateTime @updatedAt
  armorExists        Int      @default(0)
  armorOwned         Int      @default(0)
  ethArmorExists     Int      @default(0)
  ethArmorOwned      Int      @default(0)
  ethOtherExists     Int      @default(0)
  ethOtherOwned      Int      @default(0)
  ethWeaponsExists   Int      @default(0)
  ethWeaponsOwned    Int      @default(0)
  otherExists        Int      @default(0)
  otherOwned         Int      @default(0)
  setsExists         Int      @default(0)
  setsOwned          Int      @default(0)
  weaponsExists      Int      @default(0)
  weaponsOwned       Int      @default(0)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grail_progress")
}

model Achievement {
  id               String            @id @default(cuid())
  key              String            @unique
  name             String
  description      String
  icon             String?
  category         String
  rarity           String            @default("common")
  points           Int               @default(0)
  conditions       Json
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Float       @default(0)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserStatistics {
  id               String    @id @default(cuid())
  userId           String    @unique
  firstItemAt      DateTime?
  lastItemAt       DateTime?
  grailStartedAt   DateTime?
  grailCompletedAt DateTime?
  dailyProgress    Json      @default("[]")
  itemsPerDay      Float     @default(0)
  itemsPerWeek     Float     @default(0)
  bestDay          DateTime?
  bestDayCount     Int       @default(0)
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  favoriteItem     String?
  luckiestFind     String?
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_statistics")
}

model ApiLog {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  success   Boolean
  timestamp DateTime @default(now())

  @@map("api_logs")
}
